import pygame
import pymunk


pygame.init()

# Configurações da janela
width = 600
height = 600
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption('Robo Sumo')

# Configurações do espaço físico
space = pymunk.Space()

# Posição dos círculos
circle_positions = (width / 2, height / 2)

# Criar a arena
arena_radius = 200


# Criar o círculo central
center_radius = 180

# Criar o círculo externo (quando 50% do diametro do robô sai, o robô perde).
outer_radius = 225

# Criar a classe robô 

class Robot:
    def __init__(self, mass, x, y, radius=25, color=(255, 255, 255)):
        self.mass = mass
        self.body = pymunk.Body(mass=mass, moment=pymunk.moment_for_circle(mass, 0, radius))
        self.body.position = x, y
        self.shape = pymunk.Circle(self.body, radius)
        self.elasticity = 0.8
        self.friction = 1
        self.radius = radius 
        self.color = color
        self.force = 0
    
    def set_speed(self, x_speed, y_speed):
        self.body.velocity = x_speed, y_speed
        
    def update_position(self, vartmp):
        self.body.position += self.body.velocity * vartmp

# Criação do robô1 e robô2

robo1 = Robot(mass= 1, x=300, y=250, radius= 25, color = (0, 0, 255))
robo1.set_speed(x_speed=0, y_speed= 200)

robo2 = Robot(mass= 1, x=300, y=350, radius=25, color=(255, 0, 0))
robo2.set_speed(x_speed= 0, y_speed= -50)

# Adicionar os corpos ao espaço físico
space.add(robo1.body, robo1.shape)
space.add(robo2.body, robo2.shape)

# Loop principal
running = True
clock = pygame.time.Clock()
while running:
    # Tratar eventos
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    # Atualizar posição dos robôs
    vartmp = clock.tick(60) / 1000.0
    robo1.update_position(vartmp)
    robo2.update_position(vartmp)

    # Verificar se os robôs estão dentro do círculo externo.

    for robo in [robo1, robo2]:
        dx = robo.body.position.x - circle_positions[0]
        dy = robo.body.position.y - circle_positions[1]
        distance = (dx ** 2 + dy ** 2) ** 0.5
       
        if distance + 50 > outer_radius + robo.radius:
            # parar a simulação caso o robô encoste no círculo externo
            running = False

    # Atualizar a simulação física
    space.step(vartmp)

    # Desenhar
    screen.fill((0, 0, 0))

    # Desenhar e definir o raio da arena
    color = (255, 255, 255)
    pygame.draw.circle(screen, color, circle_positions, int(arena_radius), 2)

    # Desenhar e definir o raio e círculo central 
    color = (255, 255, 255)
    pygame.draw.circle(screen, color, circle_positions, int(center_radius), 2)

    # Preencher a área entre a arena e o círculo central
    color = (255, 255, 255)
    pygame.draw.circle(screen, color, circle_positions, int(center_radius), 0)
    pygame.draw.circle(screen, (0, 0, 0), circle_positions, int(center_radius - 10), 0)
    pygame.draw.circle(screen, color, circle_positions, int(arena_radius), 0)
    pygame.draw.circle(screen, (0, 0, 0), circle_positions, int(arena_radius - 10), 0)

    # Desenhar o círculo externo
    color = (0, 255, 0)
    pygame.draw.circle(screen, color, circle_positions, int(outer_radius), 2)

    # Desenhar robôs
    pygame.draw.circle(screen, robo1.color, (int(robo1.body.position[0]), int(height - robo1.body.position[1])), robo1.radius)
    pygame.draw.circle(screen, robo2.color, (int(robo2.body.position[0]), int(height - robo2.body.position[1])), robo2.radius)

    # Atualizar tela
    pygame.display.flip()
    